tasks:
  task_1:
    # id of the task. Must be unique
    id: task_1
    # task description of what this task will achieve
    task_description: A test task that is created by sajal
    # source connection name
    source_connection_name: mssql_conn
    # target connection name
    target_connection_name: [ mysql_conn, postgres_conn, mongo_conn ]
    # query that will be directly executed on the source connection database
    raw_query: select * from cars
    # the alias for the raw query result. You can query this alias
    raw_alias: raw_car_alias
    # stage query. This query to be executed only on aliases
    stage_query: select *, 'tata nexon' as car_name, current_timestamp as insert_time from raw_car_alias
    # the alias for the stage query result
    stage_alias: stage_car_alias
    # target container name
    target_container_name: cars_sajal
    # save_mode for the task
    save_mode: append
  task_2:
    id: task_2
    task_description: A mongo db source test task
    source_connection_name: mongo_conn
    target_connection_name: mysql_conn
    raw_query: {}
    raw_alias: mongo_data
    stage_query: select *, 'Mongo DB Data' as Mongo_Column from mongo_data
    stage_alias: different_alias
    target_container_name: sajal_col
    save_mode: replace
    # optional parameters
    optional_param:
      # source collection name in case of mongo db
      source_collection_name: sajal_col
  task_3:
    id: task_3
    task_description: A mongo db target test task
    # if you only want to query the stage environment
    source_connection_name: stagedb
    target_connection_name: mongo_conn
    stage_query: select item_name, max_discount, 'tata nexon' as car_name from mongo_data
    stage_alias: stage_mongo_alias
    target_container_name: sajal_col
    save_mode: append
  task_4:
    id: task_4
    task_description: DynamoDB to SQL connection test task
    source_connection_name: dynamo_conn
    target_connection_name: mssql_conn
    # Query in json format, that will be directly passed to resource('dynamodb').Table.scan()
    raw_query: {}
    raw_alias: dynamo_alias
    target_container_name: dynamo_table
    save_mode: replace
  task_5:
    id: task_5
    task_description: SQL to dynamo db task
    source_connection_name: stagedb
    target_connection_name: [dynamo_conn, mongo_conn, postgres_conn]
    stage_query: select * , 'sql value is here' as sql_value from dynamo_alias limit 300
    target_container_name: sql_table
    save_mode: replace
    optional_param:
      # automatically create a new id for every other entry, if there is no unique id present.
      # this is required as when sending data to dynamodb using batch.writer process, each batch
      # should have unique partition_key. So either have a predefined partition_key with high cardinality,
      # else set this option to true to dynamically create the same, and this will add '_id' to each entry
      automatic_id: true